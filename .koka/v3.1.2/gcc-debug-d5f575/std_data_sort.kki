/*----------------------------------------------------------------------------
   Copyright 2024, Koka-Community Authors

   Licensed under the MIT License ("The License"). You may not
   use this file except in compliance with the License. A copy of the License
   can be found in the LICENSE file at the root of this distribution.
----------------------------------------------------------------------------*/
module interface std/data/sort
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/core/undiv = std/core/undiv = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
// monadic lift
 fun @mlift-sort@10017[1,0,1,0] : forall<a,(e :: E)> (@y-x10004 : (std/core/types/list :: V -> V)<a>, pivot : a, @y-x10005 : (std/core/types/list :: V -> V)<a>) -> (e :: E) (std/core/types/list :: V -> V)<a>;
// monadic lift
 fun @mlift-sort@10018[1,0,1,0] : forall<a,(e :: E)> (greater : (std/core/types/list :: V -> V)<a>, pivot : a, ?(<) : (a, a) -> (e :: E) std/core/types/bool, @y-x10004 : (std/core/types/list :: V -> V)<a>) -> (e :: E) (std/core/types/list :: V -> V)<a>;
// monadic lift
 fun @mlift-sort@10019[1,0,1,0] : forall<a,(e :: E)> (pivot : a, ?(<) : (a, a) -> (e :: E) std/core/types/bool, @y-x10003 : ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>)) -> (e :: E) (std/core/types/list :: V -> V)<a>;
pub  fun sort[12,9,12,12] : forall<a,(e :: E)> (l : (std/core/types/list :: V -> V)<a>, ^ ?(<) : (a, a) -> (e :: E) std/core/types/bool) -> (e :: E) (std/core/types/list :: V -> V)<a>;
// monadic lift
 fun @mlift-trmc-group@10020[1,0,1,0] : forall<a,(e :: E)> (@acc : (std/core/types/ctx :: V -> V)<(std/core/types/list :: V -> V)<(std/core/types/list :: V -> V)<a>>>, pivot : a, ?(==) : (a, a) -> (e :: E) std/core/types/bool, @y-x10009 : ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>)) -> (e :: E) (std/core/types/list :: V -> V)<(std/core/types/list :: V -> V)<a>>;
pub tail fun @trmc-group[20,14,20,18] : forall<a,(e :: E)> (l : (std/core/types/list :: V -> V)<a>, ?(==) : (a, a) -> (e :: E) std/core/types/bool, @acc : (std/core/types/ctx :: V -> V)<(std/core/types/list :: V -> V)<(std/core/types/list :: V -> V)<a>>>) -> (e :: E) (std/core/types/list :: V -> V)<(std/core/types/list :: V -> V)<a>>;
pub tail fun group[20,14,20,18] : forall<a,(e :: E)> (l : (std/core/types/list :: V -> V)<a>, ?(==) : (a, a) -> (e :: E) std/core/types/bool) -> (e :: E) (std/core/types/list :: V -> V)<(std/core/types/list :: V -> V)<a>>;
pub  fun group-by[28,16,28,23] : forall<a,(e :: E)> (l : (std/core/types/list :: V -> V)<a>, same-group : (a, a) -> (e :: E) std/core/types/bool) -> (e :: E) (std/core/types/list :: V -> V)<(std/core/types/list :: V -> V)<a>>;
pub tail fun qpartition[38,14,38,23] : forall<a> (^ x : a, ys : (std/core/types/list :: V -> V)<a>, ^ ?(<) : (a, a) -> std/core/types/bool) -> ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>);
pub tail fun quicksort[31,14,31,22] : forall<a> (xs : (std/core/types/list :: V -> V)<a>, res : (std/core/types/list :: V -> V)<a>, ^ ?(<) : (a, a) -> std/core/types/bool) -> (std/core/types/list :: V -> V)<a>;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
specialize "_*" tail fun group // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(l: (std/core/types/list :: V -> V)<a>, @implicit/(==): (a, a) -> (e :: E) std/core/types/bool){
    (match (l) {
      ((std/core/types/Nil() : (std/core/types/list :: V -> V)<a> ) as @pat: ((std/core/types/list :: V -> V)<a>))
         -> std/core/types/Nil<(std/core/types/list :: V -> V)<a>>;
      ((@skip std/core/types/Cons((h: a) : a, ((std/core/types/Nil() : (std/core/types/list :: V -> V)<a> ) as @pat@1: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a> ) as @pat@0: ((std/core/types/list :: V -> V)<a>))
         -> std/core/types/Cons<(std/core/types/list :: V -> V)<a>>((std/core/types/Cons<a>(h, (std/core/types/Nil<a>))), (std/core/types/Nil<(std/core/types/list :: V -> V)<a>>));
      ((@skip std/core/types/Cons((pivot: a) : a, (rst: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a> ) as @pat@2: ((std/core/types/list :: V -> V)<a>))
         -> (match ((std/core/list/partition<a,(e :: E)>(rst, (fn<(e :: E)>(it: a){
            (@implicit/(==)(it, pivot));
          })))) {
          ((@skip std/core/types/Tuple2((equal: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>, (other: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>) ) as @pat@3: ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>))
             -> std/core/types/Cons<(std/core/types/list :: V -> V)<a>>((std/core/types/Cons<a>(pivot, equal)), (std/data/sort/group<a,(e :: E)>((std/core/types/@open<(std/core/types/total :: E),(e :: E),(x : (std/core/types/list :: V -> V)<a>) -> (std/core/types/list :: V -> V)<a>,(x : (std/core/types/list :: V -> V)<a>) -> (e :: E) (std/core/types/list :: V -> V)<a>>((std/core/undiv/pretend-decreasing<(std/core/types/list :: V -> V)<a>>))(other)), @implicit/(==))));
        });
    });
  };
specialize "_*"  fun group-by // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(l: (std/core/types/list :: V -> V)<a>, same-group: (a, a) -> (e :: E) std/core/types/bool){
    std/data/sort/group<a,(e :: E)>(l, same-group);
  };
recursive specialize "__*" borrow "^_^" tail fun qpartition // inline size: 10
  = forall<a> fn(x: a, ys: (std/core/types/list :: V -> V)<a>, @implicit/(<): (a, a) -> std/core/types/bool){
    (match (ys) {
      ((std/core/types/Cons((y: a) : a, (yy: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a> ) as @pat: ((std/core/types/list :: V -> V)<a>))
         -> (match ((@implicit/(<)(y, x))) {
          ((std/core/types/True() : std/core/types/bool ) as @pat@0: std/core/types/bool)
             -> (match ((std/data/sort/qpartition<a>(x, yy, @implicit/(<)))) {
              ((@skip std/core/types/Tuple2((lo: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>, (hi: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>) ) as @pat@1: ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>))
                 -> std/core/types/Tuple2<(std/core/types/list :: V -> V)<a>,(std/core/types/list :: V -> V)<a>>((std/core/types/Cons<a>(y, lo)), hi);
            });
          ((@skip std/core/types/False() : std/core/types/bool ) as @pat@2: std/core/types/bool)
             -> (match ((std/data/sort/qpartition<a>(x, yy, @implicit/(<)))) {
              ((@skip std/core/types/Tuple2((lo@0: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>, (hi@0: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>) ) as @pat@3: ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>))
                 -> std/core/types/Tuple2<(std/core/types/list :: V -> V)<a>,(std/core/types/list :: V -> V)<a>>(lo@0, (std/core/types/Cons<a>(y, hi@0)));
            });
        });
      ((@skip std/core/types/Nil() : (std/core/types/list :: V -> V)<a> ) as @pat@4: ((std/core/types/list :: V -> V)<a>))
         -> std/core/types/Tuple2<(std/core/types/list :: V -> V)<a>,(std/core/types/list :: V -> V)<a>>((std/core/types/Nil<a>), (std/core/types/Nil<a>));
    });
  };
specialize "__*" borrow "__^" tail fun quicksort // inline size: 1
  = forall<a> fn(xs: (std/core/types/list :: V -> V)<a>, res: (std/core/types/list :: V -> V)<a>, @implicit/(<): (a, a) -> std/core/types/bool){
    (match (xs) {
      ((std/core/types/Cons((x: a) : a, (xx: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a> ) as @pat: ((std/core/types/list :: V -> V)<a>))
         -> (match ((std/data/sort/qpartition<a>(x, xx, @implicit/(<)))) {
          ((@skip std/core/types/Tuple2((lo: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>, (hi: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>) ) as @pat@0: ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>))
             -> std/data/sort/quicksort<a>((std/core/undiv/pretend-decreasing<(std/core/types/list :: V -> V)<a>>(lo)), (std/core/types/Cons<a>(x, (std/data/sort/quicksort<a>((std/core/undiv/pretend-decreasing<(std/core/types/list :: V -> V)<a>>(hi)), res, @implicit/(<))))), @implicit/(<));
        });
      ((@skip std/core/types/Nil() : (std/core/types/list :: V -> V)<a> ) as @pat@1: ((std/core/types/list :: V -> V)<a>))
         -> res;
    });
  };
specialize "_*" borrow "_^"  fun sort // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(l: (std/core/types/list :: V -> V)<a>, @implicit/(<): (a, a) -> (e :: E) std/core/types/bool){
    (match (l) {
      ((std/core/types/Nil() : (std/core/types/list :: V -> V)<a> ) as @pat: ((std/core/types/list :: V -> V)<a>))
         -> std/core/types/Nil<a>;
      ((@skip std/core/types/Cons((h: a) : a, ((std/core/types/Nil() : (std/core/types/list :: V -> V)<a> ) as @pat@1: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a> ) as @pat@0: ((std/core/types/list :: V -> V)<a>))
         -> std/core/types/Cons<a>(h, (std/core/types/Nil<a>));
      ((@skip std/core/types/Cons((pivot: a) : a, (rst: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a> ) as @pat@2: ((std/core/types/list :: V -> V)<a>))
         -> (match ((std/core/list/partition<a,(e :: E)>(rst, (fn<(e :: E)>(it: a){
            (@implicit/(<)(it, pivot));
          })))) {
          ((@skip std/core/types/Tuple2((smaller: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>, (greater: (std/core/types/list :: V -> V)<a>) : (std/core/types/list :: V -> V)<a>) : ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>) ) as @pat@3: ((std/core/types/list :: V -> V)<a>, (std/core/types/list :: V -> V)<a>))
             -> std/core/types/@open<(std/core/types/total :: E),(e :: E),(xs : (std/core/types/list :: V -> V)<a>, ys : (std/core/types/list :: V -> V)<a>) -> (std/core/types/list :: V -> V)<a>,(xs : (std/core/types/list :: V -> V)<a>, ys : (std/core/types/list :: V -> V)<a>) -> (e :: E) (std/core/types/list :: V -> V)<a>>((fn(xs: (std/core/types/list :: V -> V)<a>, ys: (std/core/types/list :: V -> V)<a>){
              (std/core/list/append<a>(xs, ys));
            }))((std/data/sort/sort<a,(e :: E)>((std/core/types/@open<(std/core/types/total :: E),(e :: E),(x : (std/core/types/list :: V -> V)<a>) -> (std/core/types/list :: V -> V)<a>,(x : (std/core/types/list :: V -> V)<a>) -> (e :: E) (std/core/types/list :: V -> V)<a>>((std/core/undiv/pretend-decreasing<(std/core/types/list :: V -> V)<a>>))(smaller)), @implicit/(<))), (std/core/types/Cons<a>(pivot, (std/data/sort/sort<a,(e :: E)>((std/core/types/@open<(std/core/types/total :: E),(e :: E),(x : (std/core/types/list :: V -> V)<a>) -> (std/core/types/list :: V -> V)<a>,(x : (std/core/types/list :: V -> V)<a>) -> (e :: E) (std/core/types/list :: V -> V)<a>>((std/core/undiv/pretend-decreasing<(std/core/types/list :: V -> V)<a>>))(greater)), @implicit/(<))))));
        });
    });
  };
inline  fun group-by // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(l: (std/core/types/list :: V -> V)<a>, same-group: (a, a) -> (e :: E) std/core/types/bool){
    std/data/sort/group<a,(e :: E)>(l, same-group);
  };