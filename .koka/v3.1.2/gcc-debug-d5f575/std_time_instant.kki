/* Instants in time.

Instants use the mighty 128-bit `:ddouble` timestamps to represent a `:duration`
since the `epoch`.
This gives very high range and precision (up 31 decimal digits).
It spans about 10^300^ years
into the past and future, well beyond the expected life span of the universe.
Any time can be expressed with atto-second (10^-18^) precision
up to about 300,000 years in the past and future, and with pico-second (10^-12^)
precision any time since the age of the universe (about 13.8 billion years ago)
up to 30 billion years into the future. For durations under 300 years, the precision
is in excess of a zepto second (10^-21^). For comparison, it takes light about
500 zepto-seconds to travel the length of an hydrogen atom.

```unchecked
> instant(2100,1,1,0,0,0,1.0e-21).show(21)  // 1 zepto-second after Jan 1, 2100
"3155760037.000000000000000000001s"
> instant(300000,1,1,0,0,0,1.0e-18).show(18) // 1 atto-second after Jan 1, 300000
"9403971696037.000000000000000001s"
> instant(-13.82e9.int,1,1,0,0,0,1.0e-12).show(12) // 1 pico-second after the birth of the universe
"-436117139753903999.999999999999s"
```

Internally, instants are represented in a certain time scale (`:timescale`) for
efficiency and precision. They automatically convert between different time scales
when necessary (for example when comparing instants in time, or calculating durations
between UTC calendar times).

Time durations (`:duration`) are always in SI seconds (as measured on the Earth's geoid).

## References { - }

~ Begin Bibliography { caption:"9" }

~~ BibItem { #blackbody; bibitem-label:"[1]"; searchterm:"Claudine+Thomas+Accuracy+of+TAI" }
Claudine Thomas,
_The Accuracy of TAI_.
Proceedings of the 29th Annual Precise Time and Time Interval Systems and Applications Meeting,
Long Beach, California, December 1997, pp. 19--26. [pdf](https://tycho.usno.navy.mil/ptti/1997papers/Vol%2029_02.pdf)
~~

~ End Bibliography

\/
*/
module interface std/time/instant
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/num/ddouble = std/num/ddouble = "";
import std/time/timestamp = std/time/timestamp = "";
import std/time/duration = std/time/duration = "";
import std/time/date = std/time/date = "";
import std/num/int32 = std/num/int32 inline = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// Time spans are a time duration in some time scale represented as a `:ddouble`;
// this gives it very high precision and range to represent time very precisely.
// (see the [`instant`](std_time_instant.html) module)
local alias std/time/timestamp/timespan[25,1,25,28] = std/num/ddouble/ddouble = 1;
 
//------------------------------
//#kki: type declarations
 
// A time scale defines how time is measured: the rate and unit of time,
// and how it can be converted to- and from TAI.\
// For time calculations, usually the [TAI](https://en.wikipedia.org/wiki/International_Atomic_Time)
// (international atomic time) time scale (`ts-tai`) is used which is time measured as SI seconds on the Earths geoid.
// Another common time scale is UTC (`std/time/utc/ts-utc`) which also uses SI second time units but can contain leap seconds.
pub type timescale[70,1,83,75] {
  // A time scale defines how time is measured: the rate and unit of time,
// and how it can be converted to- and from TAI.\
// For time calculations, usually the [TAI](https://en.wikipedia.org/wiki/International_Atomic_Time)
// (international atomic time) time scale (`ts-tai`) is used which is time measured as SI seconds on the Earths geoid.
// Another common time scale is UTC (`std/time/utc/ts-utc`) which also uses SI second time units but can contain leap seconds.
  con Timescale[70,17,70,25](name: std/core/types/string, unit: std/core/types/string, from-tai: (std/time/duration/duration) -> std/time/timestamp/timestamp, to-tai: (std/time/timestamp/timestamp) -> std/time/duration/duration, mb-seconds-in-day: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> (std/time/timestamp/timespan == 1 std/num/ddouble/ddouble)>, mb-to-mjd2000: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : (std/time/timestamp/timespan == 1 std/num/ddouble/ddouble)) -> std/num/ddouble/ddouble>, mb-from-mjd2000: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>){0,10,8} : (name : std/core/types/string, unit : std/core/types/string, from-tai : (std/time/duration/duration) -> std/time/timestamp/timestamp, to-tai : (std/time/timestamp/timestamp) -> std/time/duration/duration, mb-seconds-in-day : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> (std/time/timestamp/timespan == 1 std/num/ddouble/ddouble)>, mb-to-mjd2000 : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : (std/time/timestamp/timespan == 1 std/num/ddouble/ddouble)) -> std/num/ddouble/ddouble>, mb-from-mjd2000 : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) -> timescale;
};
/* Represents a precise instant in time.

Internally, instants are represented in a certain time scale (`:timescale`) for
efficiency and precision. They automatically convert between different time scales
when necessary (for example when comparing instants in time, or calculating durations
between UTC calendar times).
*/
pub value{0,2,8} type instant[130,1,132,19] {
  /* Represents a precise instant in time.

Internally, instants are represented in a certain time scale (`:timescale`) for
efficiency and precision. They automatically convert between different time scales
when necessary (for example when comparing instants in time, or calculating durations
between UTC calendar times).
*/
  con Instant[130,23,130,29](since: std/time/timestamp/timestamp, ts: timescale){0,2,8} : (since : std/time/timestamp/timestamp, ts : timescale) -> instant;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `name` constructor field of the `:timescale` type.
pub  fun timescale/name[72,7,72,10] : (^ timescale : timescale) -> std/core/types/string;
// Automatically generated. Retrieves the `unit` constructor field of the `:timescale` type.
 fun timescale/unit[74,3,74,6] : (^ timescale : timescale) -> std/core/types/string;
// Automatically generated. Retrieves the `from-tai` constructor field of the `:timescale` type.
 fun timescale/from-tai[76,3,76,10] : (^ timescale : timescale) -> ((std/time/duration/duration) -> std/time/timestamp/timestamp);
// Automatically generated. Retrieves the `to-tai` constructor field of the `:timescale` type.
 fun timescale/to-tai[78,3,78,8] : (^ timescale : timescale) -> ((std/time/timestamp/timestamp) -> std/time/duration/duration);
// Automatically generated. Retrieves the `mb-seconds-in-day` constructor field of the `:timescale` type.
 fun timescale/mb-seconds-in-day[81,3,81,19] : (^ timescale : timescale) -> (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>;
// Automatically generated. Retrieves the `mb-to-mjd2000` constructor field of the `:timescale` type.
 fun timescale/mb-to-mjd2000[82,3,82,15] : (^ timescale : timescale) -> (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>;
// Automatically generated. Retrieves the `mb-from-mjd2000` constructor field of the `:timescale` type.
 fun timescale/mb-from-mjd2000[83,3,83,17] : (^ timescale : timescale) -> (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>;
pub  fun timescale/@copy[70,17,70,25] : (@this : timescale, name : (std/core/types/@optional :: V -> V)<std/core/types/string>, unit : (std/core/types/@optional :: V -> V)<std/core/types/string>, from-tai : (std/core/types/@optional :: V -> V)<(std/time/duration/duration) -> std/time/timestamp/timestamp>, to-tai : (std/core/types/@optional :: V -> V)<(std/time/timestamp/timestamp) -> std/time/duration/duration>, mb-seconds-in-day : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>>, mb-to-mjd2000 : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>>, mb-from-mjd2000 : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>>) -> timescale;
// Automatically generated. Retrieves the `since` constructor field of the `:instant` type.
 fun instant/since[131,3,131,7] : (^ instant : instant) -> std/time/timestamp/timestamp;
// Automatically generated. Retrieves the `ts` constructor field of the `:instant` type.
 fun instant/ts[132,3,132,4] : (^ instant : instant) -> timescale;
pub  fun instant/@copy[130,23,130,29] : (@this : instant, since : (std/core/types/@optional :: V -> V)<std/time/timestamp/timestamp>, ts : (std/core/types/@optional :: V -> V)<timescale>) -> instant;
// A time scale defines how time is measured: the rate and unit of time,
// and how it can be converted to- and from TAI.\
// For time calculations, usually the [TAI](https://en.wikipedia.org/wiki/International_Atomic_Time)
// (international atomic time) time scale (`ts-tai`) is used which is time measured as SI seconds on the Earths geoid.
// Another common time scale is UTC (`std/time/utc/ts-utc`) which also uses SI second time units but can contain leap seconds.
 fun @create-Timescale[70,17,70,25] : (name : std/core/types/string, unit : std/core/types/string, from-tai : (std/time/duration/duration) -> std/time/timestamp/timestamp, to-tai : (std/time/timestamp/timestamp) -> std/time/duration/duration, mb-seconds-in-day : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>>, mb-to-mjd2000 : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>>, mb-from-mjd2000 : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>>) -> timescale;
// Create a new time scale given `name`, two inverse function `from-tai` and `to-tai`,
// and an optional function that returns the seconds in the day of the instant.
// The time unit defaults to `name`.
pub  fun timescale[319,9,319,17] : (name : std/core/types/string, from-tai : (std/time/duration/duration) -> std/time/timestamp/timestamp, to-tai : (std/time/timestamp/timestamp) -> std/time/duration/duration, unit : (std/core/types/@optional :: V -> V)<std/core/types/string>, seconds-in-day : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(std/time/timestamp/timestamp) -> std/time/timestamp/timespan>>, to-mjd2000 : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>>, from-mjd2000 : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>>) -> timescale;
// Return the time scale that instant `i` uses.
pub  fun instant/timescale[136,9,136,25] : (i : instant) -> timescale;
// Return `:timestamp` since 2000-01-01 in the time scale of the instant
pub  fun instant/timestamp[147,9,147,25] : (i : instant) -> std/time/timestamp/timestamp;
// Create a new time scale based on SI seconds (as measured on the Earth's geoid) with a given
//  `name`, a fixed `offset` (=`duration0`) from TAI (e.g. GPS = TAI - 19), and
// a `epoch-y2k` (= `timestamp0`) which is the timestamp of the 2000-01-01 date in that timescale
// e.g. for a timescale `ts`:\
// `epoch-y2k = instant(2000,1,1,cal=iso-calendar(ts)).since-in(ts)`
pub  fun tai-timescale[305,9,305,21] : (name : std/core/types/string, offset : (std/core/types/@optional :: V -> V)<std/time/duration/duration>) -> timescale;
// The [TAI](https://en.wikipedia.org/wiki/International_Atomic_Time) (International atomic time)
// time scale is based on SI seconds measured on the Earth's geoid, with a 2000-01-01 TAI `epoch`.
pub val ts-tai[340,9,340,14] : timescale;
// Add a time span to an instant in time.
// This is only safe if the time unit of the timespan is the
// same as that of the instant.
 fun unsafe-add[257,5,257,14] : (i : instant, tspan : std/time/timestamp/timespan) -> instant;
// Convert a timespan between time scales
 fun convert[96,5,96,11] : (t : std/time/timestamp/timestamp, from : timescale, to : timescale) -> std/time/timestamp/timestamp;
// Return a `:timestamp` for instant `i` in a certain time scale `tscale`.
pub  fun timestamp-in[174,9,174,20] : (i : instant, tscale : timescale) -> std/time/timestamp/timestamp;
// Change the internal representation of an instant to use another timescale.
// Only used in special cases for efficiency. For example, when comparing an
// instant in TAI time to thousands of UTC times, it is more efficient to convert
// the TAI time to UTC first to avoid converting at each comparision.
pub  fun use-timescale[186,9,186,21] : (i : instant, tscale : timescale) -> instant;
// Add a duration to an instant in time.
// Note: this generally entails conversion to TAI time (`ts-tai`).
// See also `add-duration-in` and `add-days` to add
// in direct time scale units.
pub  fun (+)[229,9,229,11] : (i : instant, d : std/time/duration/duration) -> instant;
// Return the (TAI) SI second duration since the `epoch` at this instant.
pub  fun instant/duration[178,9,178,24] : (i : instant) -> std/time/duration/duration;
// Return the duration between to instants in time.
pub  fun (-)[265,9,265,11] : (i : instant, j : instant) -> std/time/duration/duration;
// Compare two `:instant`s in time.
pub  fun cmp[207,9,207,11] : (i : instant, j : instant) -> std/core/types/order;
pub  fun (==)[214,9,214,12] : (i : instant, j : instant) -> std/core/types/bool;
// Given a `:duration` since the `epoch`, return a `:timespan` for that instant in time scale `ts`.
pub  fun from-tai[116,9,116,16] : (ts : timescale, d : std/time/duration/duration) -> std/time/timestamp/timestamp;
// Return the `:duration` since the `epoch` for a timestamp `t` interpreted in time scale `ts`.
pub  fun to-tai[112,9,112,14] : (ts : timescale, t : std/time/timestamp/timestamp) -> std/time/duration/duration;
// Subtract a duration from an instant in time.
pub  fun duration/(-)[261,9,261,20] : (i : instant, d : std/time/duration/duration) -> instant;
// Are two timescales the same?
pub  fun timescale/(==)[87,9,87,22] : (t1 : timescale, t2 : timescale) -> std/core/types/bool;
// Does this timescale have leap seconds?
pub  fun has-leap-seconds[91,9,91,24] : (ts : timescale) -> std/core/types/bool;
// The seconds in the day of instant `i` (in its time scale).
pub  fun seconds-in-day[140,9,140,22] : (i : instant) -> std/time/timestamp/timespan;
// Return days since 2000-01-01 in the time scale of the instant
pub  fun days[151,9,151,12] : (i : instant) -> std/core/types/int;
// Return days since 2000-01-01 in the time scale of the instant,
// together with the clock on that day.
pub  fun days-clock[156,9,156,18] : (i : instant) -> (std/core/types/int, std/time/date/clock);
// Create an instant from a time stamp `t` interpreted in time scale `ts`.\
// Be careful to ensure that `t` should indeed be interpreted in the given time scale.
pub  fun timescale/instant[162,9,162,25] : (ts : timescale, t : std/time/timestamp/timestamp) -> instant;
// Return the instant in time scale `ts`, `days` and `secs` after 2000-01-01 in that timescale.
pub  fun date/instant[170,9,170,20] : (ts : timescale, days : std/core/types/int, secs : std/time/timestamp/timespan, leap : (std/core/types/@optional :: V -> V)<std/core/types/int>) -> instant;
// Return the instant at (TAI) SI seconds duration since the `epoch`.
pub  fun duration/instant[166,9,166,24] : (d : std/time/duration/duration) -> instant;
// Round an instant to a certain precision (`prec` is number of digits of the fraction of the second).\
// Takes special care for instants that use a UTC timescale to round into leap seconds if appropriate.
pub  fun round-to-prec[197,9,197,21] : (i : instant, prec : std/core/types/int) -> instant;
pub  fun (<)[210,9,210,11] : (i : instant, j : instant) -> std/core/types/bool;
pub  fun (!=)[215,9,215,12] : (i : instant, j : instant) -> std/core/types/bool;
pub  fun (<=)[211,9,211,12] : (i : instant, j : instant) -> std/core/types/bool;
pub  fun (>)[212,9,212,11] : (i : instant, j : instant) -> std/core/types/bool;
pub  fun (>=)[213,9,213,12] : (i : instant, j : instant) -> std/core/types/bool;
// The minimum of two instants.
pub  fun min[218,9,218,11] : (i : instant, j : instant) -> instant;
// The maximum of two instants.
pub  fun max[222,9,222,11] : (i : instant, j : instant) -> instant;
// Add `days` days to the instant.
pub  fun add-days[235,9,235,16] : (i : instant, days : std/core/types/int) -> instant;
/* Add a duration of `t` seconds of time scale `tscale`.
This can for example be used to add Unix or NTP seconds where leap seconds
are ignored (allthough it is recommended in that case to use
`:time` and add logical days etc).
```
> instant(2005,12,31).add-duration-in( ts-unix, (24*3600).timespan ).time
2006-01-01T00:00:00Z

> (instant(2005,12,31) + 24.hours).time
2005-12-31T23:59:60Z
```
*/
pub  fun add-duration-in[251,9,251,23] : (i : instant, tscale : timescale, t : std/time/timestamp/timespan) -> instant;
// Internal: show an instant as a raw timestamp in a given precision, postfixed with the time scale name.
pub  fun show-raw[274,9,274,16] : (i : instant, max-prec : (std/core/types/@optional :: V -> V)<std/core/types/int>, secs-width : (std/core/types/@optional :: V -> V)<std/core/types/int>, unit : (std/core/types/@optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
// Show an instant as a number of (TAI) SI seconds since the `epoch` in a given precision.
// This can be used as an unambigious time stamp.
pub  fun instant/show[270,9,270,20] : (i : instant, max-prec : (std/core/types/@optional :: V -> V)<std/core/types/int>, secs-width : (std/core/types/@optional :: V -> V)<std/core/types/int>) -> std/core/types/string;
// Our epoch is set at 2000-01-01 TAI (which is equal to 1999-12-31T23:59:28Z UTC).
//
// Another candidate epoch could have been the standard [J2000] epoch ([`epoch-j2000`](std_time_astro.html#epoch_j2000)),
// which equals 2000-01-01T12:00:00 TT (terrestrial time).
// However, that would mean that for the most common time scales, namely UTC and TAI, there would always be a
// fractional offset (of 32.184s) for common time stamps. Moreover, by having an epoch at noon there would be
// an extra correction needed for calendar date calculations too.
//
// Similarly, the standard Unix epoch of 1970-01-01Z UTC is not ideal either since the UTC offset with TAI
// was fractional at that time (namely 8.000082s).
//
// Finally, after 1996, TAI was corrected for black-body radiation [@blackbody] which makes
// the 2000-01-01 epoch a very precisely defined point in time.
//
//
// [J2000]: https://en.wikipedia.org/wiki/Equinox_(celestial_coordinates)#J2000.0
pub val epoch[298,9,298,13] : instant;
// The [GPS](https://en.wikipedia.org/wiki/Global_Positioning_System#Timekeeping) time scale based
// on SI seconds with a 1980-01-06 GPS epoch.\
// GPS = TAI - 19s.
pub val ts-gps[345,9,345,14] : timescale;
val gps2000[347,5,347,11] : std/time/duration/duration;
// Get the GPS time in SI seconds since the GPS epoch (1980-01-06Z)
pub  fun gps-timestamp[350,9,350,21] : (i : instant) -> std/time/duration/duration;
// Create an instant from a raw GPS time since the GPS epoch (1980-01-06Z)
pub  fun duration/gps-instant[354,9,354,28] : (gps : std/time/duration/duration) -> instant;
// Get the GPS time as weeks and SI seconds in the week since the GPS epoch (1980-01-06Z)
pub  fun gps-week-timestamp[359,9,359,26] : (i : instant) -> (std/core/types/int, std/time/duration/duration);
// Create an instant from a GPS time in weeks and SI seconds since the GPS epoch (1980-01-06Z)
pub  fun date/gps-instant[366,9,366,24] : (weeks : std/core/types/int, secs : std/time/duration/duration) -> instant;
// The [TT](https://en.wikipedia.org/wiki/Terrestrial_Time) (Terrestrial time)
// time scale is based on SI seconds with a 1977-01-01 TAI `epoch`. It is the
// continuation of TDT (Terrestrial dynamic time) and ET (Ephemeris time). TT
// is defined as: TT = TAI + 32.184s.
pub val ts-tt[373,9,373,13] : timescale;
val tt2000[375,5,375,10] : std/time/duration/duration;
// Get the TT time in SI seconds since the TT epoch (1977-01-01 TAI)
pub  fun instant/tt-instant[378,9,378,26] : (i : instant) -> std/time/duration/duration;
// Create an instant from a raw TT time since the TT epoch (1977-01-01 TAI)
pub  fun duration/tt-instant[382,9,382,27] : (tt : std/time/duration/duration) -> instant;
// Show a timestamp with an optional maximum precision (`max-prec` (=`9`)) and
// minimum width for the seconds (=`1`).
pub  fun timestamp/show[388,9,388,22] : (t : std/time/timestamp/timestamp, max-prec : (std/core/types/@optional :: V -> V)<std/core/types/int>, secs-width : (std/core/types/@optional :: V -> V)<std/core/types/int>, unit : (std/core/types/@optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
/*----------------------------------------------------------------------------
  Julian Date
----------------------------------------------------------------------------*/
val jd-epoch-delta[395,5,395,18] : std/time/timestamp/timespan;
// relative to the MJD epoch
val mjd-epoch-delta[396,5,396,19] : std/time/timestamp/timespan;
// Create an instant given a [modified julian day](https://en.wikipedia.org/wiki/Julian_day).
// and time scale `ts`.\
// `modified-julian-day = julian-day - 2400000.5`
pub  fun ddouble/instant-at-mjd[416,9,416,30] : (mjd : std/num/ddouble/ddouble, ts : timescale) -> instant;
// Create an instant given a [modified julian day](https://en.wikipedia.org/wiki/Julian_day).
// and time scale `ts`.\
// `modified-julian-day = julian-day - 2400000.5`
pub  fun float64/instant-at-mjd[410,9,410,30] : (mjd : std/core/types/float64, ts : timescale) -> instant;
// Create an instant given a [julian day](https://en.wikipedia.org/wiki/Julian_day)
// and time scale `ts` .
pub  fun ddouble/instant-at-jd[404,9,404,29] : (jd : std/num/ddouble/ddouble, ts : timescale) -> instant;
// Create an instant given a [julian day](https://en.wikipedia.org/wiki/Julian_day).
pub  fun float64/instant-at-jd[399,9,399,29] : (jd : std/core/types/float64, ts : timescale) -> instant;
// Return the modified julian day in a given time scale `ts` for an instant `i`.
// Can also pass an optional `delta` (=`timespan0`) that is added to the raw timestamp of `i`
// before conversion (used in `std/time/time` to take timezones into account)
pub  fun mjd[451,9,451,11] : (i : instant, tscale : timescale, tzdelta : (std/core/types/@optional :: V -> V)<std/time/timestamp/timespan>) -> std/num/ddouble/ddouble;
/* Return the julian day in a given time scale `ts` for an instant `i`.
Properly takes leap seconds into account when calculating the fraction of the day
in a UTC calendar. For example:
````
> time(2014,12,31,23,59,59).jd
2457023.499988425925926

> time(2015,12,31,23,59,59).jd
2457388.499988425925926

> time(2016,12,31,23,59,59).jd
2457754.499976852119767

> time(2016,12,31,23,59,60).jd
2457754.499988426059884
````
.
*/
pub  fun jd[444,9,444,10] : (i : instant, ts : timescale) -> std/num/ddouble/ddouble;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun timescale/name // inline size: 0
  = fn(timescale@0: timescale){
    match (timescale@0) {
      ((@skip std/time/instant/Timescale((@x: std/core/types/string) : std/core/types/string, (@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@2: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
         -> @x;
    };
  };
inline borrow "^"  fun timescale/unit // inline size: 0
  = fn(timescale@0: timescale){
    match (timescale@0) {
      ((@skip std/time/instant/Timescale((@pat@0: std/core/types/string) : std/core/types/string, (@x: std/core/types/string) : std/core/types/string, (@pat@1: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@2: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
         -> @x;
    };
  };
inline borrow "^"  fun timescale/from-tai // inline size: 0
  = fn(timescale@0: timescale){
    match (timescale@0) {
      ((@skip std/time/instant/Timescale((@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string, (@x: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@2: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
         -> @x;
    };
  };
inline borrow "^"  fun timescale/to-tai // inline size: 0
  = fn(timescale@0: timescale){
    match (timescale@0) {
      ((@skip std/time/instant/Timescale((@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string, (@pat@2: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@x: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
         -> @x;
    };
  };
inline borrow "^"  fun timescale/mb-seconds-in-day // inline size: 0
  = fn(timescale@0: timescale){
    match (timescale@0) {
      ((@skip std/time/instant/Timescale((@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string, (@pat@2: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@3: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@x: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
         -> @x;
    };
  };
inline borrow "^"  fun timescale/mb-to-mjd2000 // inline size: 0
  = fn(timescale@0: timescale){
    match (timescale@0) {
      ((@skip std/time/instant/Timescale((@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string, (@pat@2: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@3: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@x: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
         -> @x;
    };
  };
inline borrow "^"  fun timescale/mb-from-mjd2000 // inline size: 0
  = fn(timescale@0: timescale){
    match (timescale@0) {
      ((@skip std/time/instant/Timescale((@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string, (@pat@2: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@3: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@5: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@x: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
         -> @x;
    };
  };
inline borrow "^"  fun instant/since // inline size: 0
  = fn(instant: instant){
    match (instant) {
      ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale) : timescale) : instant ) as @pat: instant)
         -> @x;
    };
  };
inline borrow "^"  fun instant/ts // inline size: 0
  = fn(instant: instant){
    match (instant) {
      ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x: timescale) : timescale) : instant ) as @pat: instant)
         -> @x;
    };
  };
 fun instant/@copy // inline size: 3
  = fn(@this: instant, since: (std/core/types/@optional :: V -> V)<std/time/timestamp/timestamp>, ts: (std/core/types/@optional :: V -> V)<timescale>){
    std/time/instant/Instant((match (since) {
        ((std/core/types/@Optional((@uniq-since@278: std/time/timestamp/timestamp) : std/time/timestamp/timestamp) : (std/core/types/@optional :: V -> V)<std/time/timestamp/timestamp> ) as @pat: ((std/core/types/@optional :: V -> V)<std/time/timestamp/timestamp>))
           -> @uniq-since@278;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/time/timestamp/timestamp> ) as @pat@0: ((std/core/types/@optional :: V -> V)<std/time/timestamp/timestamp>))
           -> (match (@this) {
            ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale) : timescale) : instant ) as @pat@1: instant)
               -> @x;
          });
      }), (match (ts) {
        ((std/core/types/@Optional((@uniq-ts@285: timescale) : timescale) : (std/core/types/@optional :: V -> V)<timescale> ) as @pat@1@1: ((std/core/types/@optional :: V -> V)<timescale>))
           -> @uniq-ts@285;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<timescale> ) as @pat@2@0: ((std/core/types/@optional :: V -> V)<timescale>))
           -> (match (@this) {
            ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@2: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@1: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@0: timescale) : timescale) : instant ) as @pat@10: instant)
               -> @x@0;
          });
      }));
  };
inline  fun @create-Timescale // inline size: 4
  = fn(name: std/core/types/string, unit: std/core/types/string, from-tai@0: (std/time/duration/duration) -> std/time/timestamp/timestamp, to-tai@0: (std/time/timestamp/timestamp) -> std/time/duration/duration, mb-seconds-in-day: (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>>, mb-to-mjd2000: (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>>, mb-from-mjd2000: (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>>){
    std/time/instant/Timescale(name, unit, from-tai@0, to-tai@0, (match (mb-seconds-in-day) {
        ((std/core/types/@Optional((@uniq-mb-seconds-in-day@355: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>> ) as @pat: ((std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>>))
           -> @uniq-mb-seconds-in-day@355;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>> ) as @pat@0: ((std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>>))
           -> std/core/types/Nothing<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>;
      }), (match (mb-to-mjd2000) {
        ((std/core/types/@Optional((@uniq-mb-to-mjd2000@361: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>> ) as @pat@1: ((std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>>))
           -> @uniq-mb-to-mjd2000@361;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>> ) as @pat@2: ((std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>>))
           -> std/core/types/Nothing<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>;
      }), (match (mb-from-mjd2000) {
        ((std/core/types/@Optional((@uniq-mb-from-mjd2000@367: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>> ) as @pat@3: ((std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>>))
           -> @uniq-mb-from-mjd2000@367;
        ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>> ) as @pat@4: ((std/core/types/@optional :: V -> V)<(std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>>))
           -> std/core/types/Nothing<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>;
      }));
  };
inline  fun instant/timescale // inline size: 0
  = fn(i: instant){
    match (i) {
      ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x: timescale) : timescale) : instant ) as @pat: instant)
         -> @x;
    };
  };
inline  fun instant/timestamp // inline size: 0
  = fn(i: instant){
    match (i) {
      ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale) : timescale) : instant ) as @pat: instant)
         -> @x;
    };
  };
 fun unsafe-add // inline size: 3
  = fn(i: instant, tspan: std/time/timestamp/timespan){
    std/time/instant/Instant((std/time/timestamp/Timestamp((std/num/ddouble/(+)((match (i) {
            ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@1: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x@1: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2@1: timescale) : timescale) : instant ) as @pat@4: instant)
               -> (match (@x@1) {
                ((@skip std/time/timestamp/Timestamp(((@skip std/num/ddouble/Ddouble((@pat@0: std/core/types/float64) : std/core/types/float64, (@pat@1: std/core/types/float64) : std/core/types/float64) : std/num/ddouble/ddouble ) as @x: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat: std/time/timestamp/timestamp)
                   -> @x;
              });
          }), tspan)), (match (i) {
          ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@1@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@1@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x@1@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0@0: std/core/types/string) : std/core/types/string, (@pat@4@0@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2@1@0: timescale) : timescale) : instant ) as @pat@4@1: instant)
             -> (match (@x@1@0) {
              ((@skip std/time/timestamp/Timestamp(((@skip std/num/ddouble/Ddouble((@pat@1@0: std/core/types/float64) : std/core/types/float64, (@pat@2@0: std/core/types/float64) : std/core/types/float64) : std/num/ddouble/ddouble ) as @pat@0@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@x@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@3: std/time/timestamp/timestamp)
                 -> @x@0;
            });
        }))), (match (i) {
        ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@2: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@2: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@2: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@1: std/core/types/string) : std/core/types/string, (@pat@4@1@0: std/core/types/string) : std/core/types/string, (@pat@5@0@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@2: timescale) : timescale) : instant ) as @pat@10: instant)
           -> @x@2;
      }));
  };
 fun timestamp-in // inline size: 1
  = fn(i: instant, tscale: timescale){
    std/time/instant/convert((match (i) {
        ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale) : timescale) : instant ) as @pat: instant)
           -> @x;
      }), (match (i) {
        ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@0: timescale) : timescale) : instant ) as @pat@10: instant)
           -> @x@0;
      }), tscale);
  };
 fun use-timescale // inline size: 4
  = fn(i: instant, tscale: timescale){
    match ((std/core/string/(==)((match (i) {
        ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@0: timescale) : timescale) : instant ) as @pat@6: instant)
           -> (match (@x@0) {
            ((@skip std/time/instant/Timescale((@x: std/core/types/string) : std/core/types/string, (@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@2: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
               -> @x;
          });
      }), (match (tscale) {
        ((@skip std/time/instant/Timescale((@x@1: std/core/types/string) : std/core/types/string, (@pat@0@1: std/core/types/string) : std/core/types/string, (@pat@1@1: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@2@1: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3@1: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4@1: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5@1: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@10: timescale)
           -> @x@1;
      })))) {
      ((std/core/types/True() : std/core/types/bool ) as @pat@11: std/core/types/bool)
         -> i;
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0@2: std/core/types/bool)
         -> std/time/instant/Instant((std/time/instant/convert((match (i) {
              ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@3: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@2: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x@2: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@2: std/core/types/string) : std/core/types/string, (@pat@4@2: std/core/types/string) : std/core/types/string, (@pat@5@2: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@1: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2@2: timescale) : timescale) : instant ) as @pat@12: instant)
                 -> @x@2;
            }), (match (i) {
              ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@3: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@3: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@4: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@3: std/core/types/string) : std/core/types/string, (@pat@4@3: std/core/types/string) : std/core/types/string, (@pat@5@3: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@2: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@1: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@1: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@1: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@3: timescale) : timescale) : instant ) as @pat@13: instant)
                 -> @x@3;
            }), tscale)), tscale);
    };
  };
 fun instant/duration // inline size: 3
  = fn(i: instant){
    val t@10065[1,0,1,0] : std/time/timestamp/timestamp
          = std/time/instant/convert((match (i) {
              ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale) : timescale) : instant ) as @pat: instant)
                 -> @x;
            }), (match (i) {
              ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@0: timescale) : timescale) : instant ) as @pat@10: instant)
                 -> @x@0;
            }), std/time/instant/ts-tai);
    std/time/duration/Duration((std/time/timestamp/unsafe-timespan-withleap(t@10065)));
  };
 fun (==) // inline size: 2
  = fn(i: instant, j: instant){
    std/core/order/(==)((std/time/instant/cmp(i, j)), std/core/types/Eq);
  };
 fun from-tai // inline size: 4
  = fn(ts: timescale, d: std/time/duration/duration){
    std/time/instant/convert((std/time/timestamp/Timestamp((match (d) {
          ((@skip std/time/duration/Duration(((@skip std/num/ddouble/Ddouble((@pat@0@0: std/core/types/float64) : std/core/types/float64, (@pat@1@0: std/core/types/float64) : std/core/types/float64) : std/num/ddouble/ddouble ) as @x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : std/time/duration/duration ) as @pat@1: std/time/duration/duration)
             -> @x;
        }), (std/num/int32/int32((match ((std/core/types/@None<std/core/types/int>)) {
          ((std/core/types/@Optional((@uniq-leap@127: std/core/types/int) : std/core/types/int) : (std/core/types/@optional :: V -> V)<std/core/types/int> ) as @pat: ((std/core/types/@optional :: V -> V)<std/core/types/int>))
             -> @uniq-leap@127;
          ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/core/types/int> ) as @pat@0: ((std/core/types/@optional :: V -> V)<std/core/types/int>))
             -> 0;
        }))))), std/time/instant/ts-tai, ts);
  };
 fun to-tai // inline size: 3
  = fn(ts: timescale, t: std/time/timestamp/timestamp){
    val t@0@10074[1,0,1,0] : std/time/timestamp/timestamp
          = std/time/instant/convert(t, ts, std/time/instant/ts-tai);
    std/time/duration/Duration((std/time/timestamp/unsafe-timespan-withleap(t@0@10074)));
  };
 fun timescale/(==) // inline size: 1
  = fn(t1: timescale, t2: timescale){
    std/core/string/(==)((match (t1) {
        ((@skip std/time/instant/Timescale((@x: std/core/types/string) : std/core/types/string, (@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@2: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
           -> @x;
      }), (match (t2) {
        ((@skip std/time/instant/Timescale((@x@0: std/core/types/string) : std/core/types/string, (@pat@0@0: std/core/types/string) : std/core/types/string, (@pat@1@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@2@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@3@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@6: timescale)
           -> @x@0;
      }));
  };
 fun has-leap-seconds // inline size: 1
  = fn(ts: timescale){
    match (ts) {
      ((@skip std/time/instant/Timescale((@pat@0@0: std/core/types/string) : std/core/types/string, (@pat@1@0: std/core/types/string) : std/core/types/string, (@pat@2@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@3: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@x: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale)
         -> (match (@x) {
          ((std/core/types/Just((@pat@0: (t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan) : (t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan> ) as @pat: ((std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>))
             -> std/core/types/True;
          ((@skip std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan> ) as @pat@1: ((std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>))
             -> std/core/types/False;
        });
    };
  };
 fun seconds-in-day // inline size: 2
  = fn(i: instant){
    match (i) {
      ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@0: timescale) : timescale) : instant ) as @pat@6: instant)
         -> (match (@x@0) {
          ((@skip std/time/instant/Timescale((@pat@0: std/core/types/string) : std/core/types/string, (@pat@1: std/core/types/string) : std/core/types/string, (@pat@2: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@3: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@x: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@4: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@5: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat: timescale)
             -> (match (@x) {
              ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan> ) as @pat@10: ((std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>))
                 -> std/time/timestamp/solar-secs-per-day;
              ((@skip std/core/types/Just((f: (t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan) : (t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan> ) as @pat@0@1: ((std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>))
                 -> f((match (i) {
                  ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@2: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x@1: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@1: std/core/types/string) : std/core/types/string, (@pat@4@1: std/core/types/string) : std/core/types/string, (@pat@5@1: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@1: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2@1: timescale) : timescale) : instant ) as @pat@11: instant)
                     -> @x@1;
                }));
            });
        });
    };
  };
 fun days // inline size: 1
  = fn(i: instant){
    val tuple2@10043[1,0,1,0] : (std/core/types/int, std/num/ddouble/ddouble)
          = std/time/timestamp/days-seconds((match (i) {
            ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale) : timescale) : instant ) as @pat@1: instant)
               -> @x@0;
          }));
    match (tuple2@10043) {
      ((@skip std/core/types/Tuple2((@x: std/core/types/int) : std/core/types/int, (@pat@0: std/num/ddouble/ddouble) : std/num/ddouble/ddouble) : (std/core/types/int, std/num/ddouble/ddouble) ) as @pat: (std/core/types/int, std/num/ddouble/ddouble))
         -> @x;
    };
  };
 fun days-clock // inline size: 4
  = fn(i: instant){
    match ((std/time/timestamp/days-seconds((match (i) {
      ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@1: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2@1: timescale) : timescale) : instant ) as @pat@3: instant)
         -> @x@0;
    })))) {
      ((@skip std/core/types/Tuple2((days@0: std/core/types/int) : std/core/types/int, ((@skip std/num/ddouble/Ddouble((@pat@0: std/core/types/float64) : std/core/types/float64, (@pat@1: std/core/types/float64) : std/core/types/float64) : std/num/ddouble/ddouble ) as secs: std/num/ddouble/ddouble) : std/num/ddouble/ddouble) : (std/core/types/int, std/num/ddouble/ddouble) ) as @pat: (std/core/types/int, std/num/ddouble/ddouble))
         -> std/core/types/Tuple2<std/core/types/int,std/time/date/clock>(days@0, (std/time/date/#leap/clock(secs, (std/num/int32/int((match (i) {
              ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0@1@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1@1@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x@0@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2@1@0: timescale) : timescale) : instant ) as @pat@3@1: instant)
                 -> (match (@x@0@0) {
                  ((@skip std/time/timestamp/Timestamp(((@skip std/num/ddouble/Ddouble((@pat@1@0: std/core/types/float64) : std/core/types/float64, (@pat@2@0: std/core/types/float64) : std/core/types/float64) : std/num/ddouble/ddouble ) as @pat@0@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@x: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@2: std/time/timestamp/timestamp)
                     -> @x;
                });
            }))))));
    };
  };
 fun timescale/instant // inline size: 1
  = fn(ts: timescale, t: std/time/timestamp/timestamp){
    std/time/instant/Instant(t, ts);
  };
 fun duration/instant // inline size: 4
  = fn(d: std/time/duration/duration){
    val t@10090[1,0,1,0] : std/time/timestamp/timestamp
          = std/time/timestamp/Timestamp((match (d) {
              ((@skip std/time/duration/Duration(((@skip std/num/ddouble/Ddouble((@pat@0@0: std/core/types/float64) : std/core/types/float64, (@pat@1@0: std/core/types/float64) : std/core/types/float64) : std/num/ddouble/ddouble ) as @x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : std/time/duration/duration ) as @pat@1: std/time/duration/duration)
                 -> @x;
            }), (std/num/int32/int32((match ((std/core/types/@None<std/core/types/int>)) {
              ((std/core/types/@Optional((@uniq-leap@127: std/core/types/int) : std/core/types/int) : (std/core/types/@optional :: V -> V)<std/core/types/int> ) as @pat: ((std/core/types/@optional :: V -> V)<std/core/types/int>))
                 -> @uniq-leap@127;
              ((@skip std/core/types/@None() : (std/core/types/@optional :: V -> V)<std/core/types/int> ) as @pat@0: ((std/core/types/@optional :: V -> V)<std/core/types/int>))
                 -> 0;
            }))));
    std/time/instant/Instant(t@10090, std/time/instant/ts-tai);
  };
 fun (<) // inline size: 2
  = fn(i: instant, j: instant){
    std/core/order/(==)((std/time/instant/cmp(i, j)), std/core/types/Lt);
  };
 fun (!=) // inline size: 2
  = fn(i: instant, j: instant){
    std/core/order/(!=)((std/time/instant/cmp(i, j)), std/core/types/Eq);
  };
 fun (<=) // inline size: 2
  = fn(i: instant, j: instant){
    std/core/order/(!=)((std/time/instant/cmp(i, j)), std/core/types/Gt);
  };
 fun (>) // inline size: 2
  = fn(i: instant, j: instant){
    std/core/order/(==)((std/time/instant/cmp(i, j)), std/core/types/Gt);
  };
 fun (>=) // inline size: 2
  = fn(i: instant, j: instant){
    std/core/order/(!=)((std/time/instant/cmp(i, j)), std/core/types/Lt);
  };
 fun min // inline size: 3
  = fn(i: instant, j: instant){
    match ((std/core/order/(!=)((std/time/instant/cmp(i, j)), std/core/types/Gt))) {
      ((std/core/types/True() : std/core/types/bool ) as @pat: std/core/types/bool)
         -> i;
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0: std/core/types/bool)
         -> j;
    };
  };
 fun max // inline size: 3
  = fn(i: instant, j: instant){
    match ((std/core/order/(!=)((std/time/instant/cmp(i, j)), std/core/types/Lt))) {
      ((std/core/types/True() : std/core/types/bool ) as @pat: std/core/types/bool)
         -> i;
      ((@skip std/core/types/False() : std/core/types/bool ) as @pat@0: std/core/types/bool)
         -> j;
    };
  };
 fun add-days // inline size: 2
  = fn(i: instant, days@0: std/core/types/int){
    std/time/instant/Instant((std/time/timestamp/add-days((match (i) {
          ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@1: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @x: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3: std/core/types/string) : std/core/types/string, (@pat@4: std/core/types/string) : std/core/types/string, (@pat@5: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @pat@2: timescale) : timescale) : instant ) as @pat: instant)
             -> @x;
        }), days@0)), (match (i) {
        ((@skip std/time/instant/Instant(((@skip std/time/timestamp/Timestamp((@pat@1@0: std/time/timestamp/timespan) : std/time/timestamp/timespan, (@pat@2@0: std/core/types/int32) : std/core/types/int32) : std/time/timestamp/timestamp ) as @pat@0@0: std/time/timestamp/timestamp) : std/time/timestamp/timestamp, ((@skip std/time/instant/Timescale((@pat@3@0: std/core/types/string) : std/core/types/string, (@pat@4@0: std/core/types/string) : std/core/types/string, (@pat@5@0: (std/time/duration/duration) -> std/time/timestamp/timestamp) : (std/time/duration/duration) -> std/time/timestamp/timestamp, (@pat@6@0: (std/time/timestamp/timestamp) -> std/time/duration/duration) : (std/time/timestamp/timestamp) -> std/time/duration/duration, (@pat@7@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp) -> std/time/timestamp/timespan>, (@pat@8@0: (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>) : (std/core/types/maybe :: V -> V)<(t : std/time/timestamp/timestamp, tzdelta : std/time/timestamp/timespan) -> std/num/ddouble/ddouble>, (@pat@9@0: (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : (std/core/types/maybe :: V -> V)<(days : std/core/types/int, frac : std/num/ddouble/ddouble) -> std/time/timestamp/timestamp>) : timescale ) as @x@0: timescale) : timescale) : instant ) as @pat@10: instant)
           -> @x@0;
      }));
  };
 fun float64/instant-at-mjd // inline size: 2
  = fn(mjd@0: std/core/types/float64, ts: timescale){
    std/time/instant/#ddouble/instant-at-mjd((std/num/ddouble/Ddouble(mjd@0, 0.0)), ts);
  };
 fun jd // inline size: 2
  = fn(i: instant, ts: timescale){
    std/num/ddouble/(+)((std/time/instant/mjd(i, ts, (std/core/types/@None<std/time/timestamp/timespan>))), std/time/instant/jd-epoch-delta);
  };